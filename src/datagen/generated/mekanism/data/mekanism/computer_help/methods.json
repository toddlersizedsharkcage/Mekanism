{
  "API Global: computerEnergyHelper": [
    {
      "description": "Convert Forge Energy to Mekanism Joules",
      "methodName": "feToJoules",
      "params": [
        {
          "type": "Number (FloatingLong)",
          "javaType": "mekanism.api.math.FloatingLong",
          "name": "fe"
        }
      ],
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Convert Mekanism Joules to Forge Energy",
      "methodName": "joulesToFE",
      "params": [
        {
          "type": "Number (FloatingLong)",
          "javaType": "mekanism.api.math.FloatingLong",
          "name": "joules"
        }
      ],
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    }
  ],
  "API Global: computerFilterHelper": [
    {
      "description": "Create a Digital Miner Item Filter from an Item name",
      "methodName": "createMinerItemFilter",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "item"
        }
      ],
      "returns": {
        "type": "Table (MinerItemStackFilter)",
        "javaType": "mekanism.common.content.miner.MinerItemStackFilter"
      }
    },
    {
      "description": "Create a Digital Miner Mod Id Filter from a mod id",
      "methodName": "createMinerModIdFilter",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "modId"
        }
      ],
      "returns": {
        "type": "Table (MinerModIDFilter)",
        "javaType": "mekanism.common.content.miner.MinerModIDFilter"
      }
    },
    {
      "description": "Create a Digital Miner Tag Filter from a Tag name",
      "methodName": "createMinerTagFilter",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "tag"
        }
      ],
      "returns": {
        "type": "Table (MinerTagFilter)",
        "javaType": "mekanism.common.content.miner.MinerTagFilter"
      }
    },
    {
      "description": "Create an Oredictionificator filter from a tag, without specifying an output item",
      "methodName": "createOredictionificatorItemFilter",
      "params": [
        {
          "type": "String (ResourceLocation)",
          "javaType": "net.minecraft.resources.ResourceLocation",
          "name": "filterTag"
        }
      ],
      "returns": {
        "type": "Table (OredictionificatorItemFilter)",
        "javaType": "mekanism.common.content.oredictionificator.OredictionificatorItemFilter"
      }
    },
    {
      "description": "Create an Oredictionificator filter from a tag and a selected output. The output is not validated.",
      "methodName": "createOredictionificatorItemFilter",
      "params": [
        {
          "type": "String (ResourceLocation)",
          "javaType": "net.minecraft.resources.ResourceLocation",
          "name": "filterTag"
        },
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "selectedOutput"
        }
      ],
      "returns": {
        "type": "Table (OredictionificatorItemFilter)",
        "javaType": "mekanism.common.content.oredictionificator.OredictionificatorItemFilter"
      }
    },
    {
      "description": "Create a QIO Item Filter structure from an Item name",
      "methodName": "createQIOItemFilter",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "item"
        }
      ],
      "returns": {
        "type": "Table (QIOItemStackFilter)",
        "javaType": "mekanism.common.content.qio.filter.QIOItemStackFilter"
      }
    },
    {
      "description": "Create a QIO Mod Id Filter from a mod id",
      "methodName": "createQIOModIdFilter",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "modId"
        }
      ],
      "returns": {
        "type": "Table (QIOModIDFilter)",
        "javaType": "mekanism.common.content.qio.filter.QIOModIDFilter"
      }
    },
    {
      "description": "Create a QIO Tag Filter from a Tag name",
      "methodName": "createQIOTagFilter",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "tag"
        }
      ],
      "returns": {
        "type": "Table (QIOTagFilter)",
        "javaType": "mekanism.common.content.qio.filter.QIOTagFilter"
      }
    },
    {
      "description": "Create a Logistical Sorter Item Filter structure from an Item name",
      "methodName": "createSorterItemFilter",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "item"
        }
      ],
      "returns": {
        "type": "Table (SorterItemStackFilter)",
        "javaType": "mekanism.common.content.transporter.SorterItemStackFilter"
      }
    },
    {
      "description": "Create a Logistical Sorter Mod Id Filter structure from a mod id",
      "methodName": "createSorterModIdFilter",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "modId"
        }
      ],
      "returns": {
        "type": "Table (SorterModIDFilter)",
        "javaType": "mekanism.common.content.transporter.SorterModIDFilter"
      }
    },
    {
      "description": "Create a Logistical Sorter Tag Filter from a tag",
      "methodName": "createSorterTagFilter",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "tag"
        }
      ],
      "returns": {
        "type": "Table (SorterTagFilter)",
        "javaType": "mekanism.common.content.transporter.SorterTagFilter"
      }
    }
  ],
  "Antiprotonic Nucleosynthesizer": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input gas tank.",
      "methodName": "getInputChemical",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the input gas tank.",
      "methodName": "getInputChemicalCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the input gas tank.",
      "methodName": "getInputChemicalFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input gas item slot.",
      "methodName": "getInputChemicalItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the input gas tank.",
      "methodName": "getInputChemicalNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the input item slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Bin": [
    {
      "description": "Get the maximum number of items the bin can contain.",
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the type of item the Bin is locked to (or Air if not locked)",
      "methodName": "getLock",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the bin.",
      "methodName": "getStored",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "If true, the Bin is locked to a particular item type.",
      "methodName": "isLocked",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Lock the Bin to the currently stored item type. The Bin must not be creative, empty, or already locked",
      "methodName": "lock"
    },
    {
      "description": "Unlock the Bin's fixed item type. The Bin must not be creative, or already unlocked",
      "methodName": "unlock"
    }
  ],
  "Bio Generator": [
    {
      "description": "Get the contents of the biofuel tank.",
      "methodName": "getBioFuel",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the biofuel tank.",
      "methodName": "getBioFuelCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the biofuel tank.",
      "methodName": "getBioFuelFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the biofuel tank.",
      "methodName": "getBioFuelNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the energy item.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the fuel slot.",
      "methodName": "getFuelItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Boiler Multiblock (formed)": [
    {
      "description": "Get the maximum possible boil rate for this Boiler, based on the number of Superheating Elements",
      "methodName": "getBoilCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the rate of boiling (mB/t)",
      "methodName": "getBoilRate",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the cooled coolant tank.",
      "methodName": "getCooledCoolant",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the cooled coolant tank.",
      "methodName": "getCooledCoolantCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the cooled coolant tank.",
      "methodName": "getCooledCoolantFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the cooled coolant tank.",
      "methodName": "getCooledCoolantNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the amount of heat lost to the environment in the last tick (Kelvin)",
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the heated coolant tank.",
      "methodName": "getHeatedCoolant",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the heated coolant tank.",
      "methodName": "getHeatedCoolantCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the heated coolant tank.",
      "methodName": "getHeatedCoolantFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the heated coolant tank.",
      "methodName": "getHeatedCoolantNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the maximum rate of boiling seen (mB/t)",
      "methodName": "getMaxBoilRate",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the steam tank.",
      "methodName": "getSteam",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the steam tank.",
      "methodName": "getSteamCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the steam tank.",
      "methodName": "getSteamFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the steam tank.",
      "methodName": "getSteamNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "How many superheaters this Boiler has",
      "methodName": "getSuperheaters",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the temperature of the boiler in Kelvin.",
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the water tank.",
      "methodName": "getWater",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the water tank.",
      "methodName": "getWaterCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the water tank.",
      "methodName": "getWaterFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the water tank.",
      "methodName": "getWaterNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    }
  ],
  "Boiler Valve": [
    {
      "description": "Toggle the current valve configuration to the previous option in the list",
      "methodName": "decrementMode"
    },
    {
      "description": "Get the current configuration of this valve",
      "methodName": "getMode",
      "returns": {
        "type": "String (BoilerValveMode)",
        "javaType": "mekanism.common.block.attribute.AttributeStateBoilerValveMode$BoilerValveMode"
      }
    },
    {
      "description": "Toggle the current valve configuration to the next option in the list",
      "methodName": "incrementMode"
    },
    {
      "description": "Change the configuration of this valve",
      "methodName": "setMode",
      "params": [
        {
          "type": "String (BoilerValveMode)",
          "javaType": "mekanism.common.block.attribute.AttributeStateBoilerValveMode$BoilerValveMode",
          "name": "mode"
        }
      ]
    }
  ],
  "Chemical Crystallizer": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input tank.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the input tank.",
      "methodName": "getInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the input tank.",
      "methodName": "getInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input item slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the input tank.",
      "methodName": "getInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Chemical Dissolution Chamber": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the gas input tank.",
      "methodName": "getGasInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas input tank.",
      "methodName": "getGasInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas input tank.",
      "methodName": "getGasInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the gas input tank.",
      "methodName": "getGasInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the gas input item slot.",
      "methodName": "getInputGasItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Chemical Infuser": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the left input tank.",
      "methodName": "getLeftInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the left input tank.",
      "methodName": "getLeftInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the left input tank.",
      "methodName": "getLeftInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the left input item slot.",
      "methodName": "getLeftInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the left input tank.",
      "methodName": "getLeftInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output (center) tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output (center) tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output (center) tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output item slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output (center) tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the right input tank.",
      "methodName": "getRightInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the right input tank.",
      "methodName": "getRightInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the right input tank.",
      "methodName": "getRightInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the right input item slot.",
      "methodName": "getRightInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the right input tank.",
      "methodName": "getRightInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Chemical Oxidizer": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output item slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Chemical Tank": [
    {
      "description": "Descend the Dumping mode to the previous configuration in the list",
      "methodName": "decrementDumpingMode",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the capacity of the tank.",
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the drain slot.",
      "methodName": "getDrainItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the current Dumping configuration",
      "methodName": "getDumpingMode",
      "returns": {
        "type": "String (GasMode)",
        "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode"
      }
    },
    {
      "description": "Get the contents of the fill slot.",
      "methodName": "getFillItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the filled percentage of the tank.",
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the tank.",
      "methodName": "getNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the tank.",
      "methodName": "getStored",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Advance the Dumping mode to the next configuration in the list",
      "methodName": "incrementDumpingMode",
      "requiresPublicSecurity": true
    },
    {
      "description": "Set the Dumping mode of the tank",
      "methodName": "setDumpingMode",
      "params": [
        {
          "type": "String (GasMode)",
          "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Chemical Washer": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the fluid tank.",
      "methodName": "getFluid",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the fluid tank.",
      "methodName": "getFluidCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the fluid tank.",
      "methodName": "getFluidFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fluid item input slot.",
      "methodName": "getFluidItemInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the fluid item output slot.",
      "methodName": "getFluidItemOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the fluid tank.",
      "methodName": "getFluidNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the slurry item output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the input slurry tank.",
      "methodName": "getSlurryInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the input slurry tank.",
      "methodName": "getSlurryInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the input slurry tank.",
      "methodName": "getSlurryInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the input slurry tank.",
      "methodName": "getSlurryInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output slurry tank.",
      "methodName": "getSlurryOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output slurry tank.",
      "methodName": "getSlurryOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output slurry tank.",
      "methodName": "getSlurryOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the output slurry tank.",
      "methodName": "getSlurryOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Combiner": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the main input slot.",
      "methodName": "getMainInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the secondary input slot.",
      "methodName": "getSecondaryInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Combining Factory": [
    {
      "description": "Get the contents of the secondary input slot.",
      "methodName": "getSecondaryInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Compressing/Injecting/Purifying Factory": [
    {
      "description": "Empty the contents of the gas tank into the environment",
      "methodName": "dumpChemical",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the contents of the gas tank.",
      "methodName": "getChemical",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas tank.",
      "methodName": "getChemicalCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas tank.",
      "methodName": "getChemicalFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the chemical item (extra) slot.",
      "methodName": "getChemicalItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the gas tank.",
      "methodName": "getChemicalNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Compressing/Injecting/Purifying Machine": [
    {
      "description": "Empty the contents of the gas tank into the environment",
      "methodName": "dumpChemical",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the contents of the gas tank.",
      "methodName": "getChemical",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas tank.",
      "methodName": "getChemicalCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas tank.",
      "methodName": "getChemicalFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the secondary input slot.",
      "methodName": "getChemicalItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the gas tank.",
      "methodName": "getChemicalNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Digital Miner": [
    {
      "description": "Add a new filter to the miner. Requires miner to be stopped/reset first",
      "methodName": "addFilter",
      "params": [
        {
          "type": "Table (MinerFilter)",
          "javaType": "mekanism.common.content.miner.MinerFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Remove the target for Replacement in Inverse Mode. Requires miner to be stopped/reset first",
      "methodName": "clearInverseModeReplaceTarget",
      "requiresPublicSecurity": true
    },
    {
      "description": "Whether Auto Eject is turned on",
      "methodName": "getAutoEject",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Whether Auto Pull is turned on",
      "methodName": "getAutoPull",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the current list of Miner Filters",
      "methodName": "getFilters",
      "returns": {
        "type": "List (Table (MinerFilter))",
        "javaExtra": [
          "mekanism.common.content.miner.MinerFilter"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "description": "Whether Inverse Mode is enabled or not",
      "methodName": "getInverseMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the configured Replacement target item",
      "methodName": "getInverseModeReplaceTarget",
      "returns": {
        "type": "String (Item)",
        "javaType": "net.minecraft.world.item.Item"
      }
    },
    {
      "description": "Whether Inverse Mode Require Replacement is turned on",
      "methodName": "getInverseModeRequiresReplacement",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the contents of the internal inventory slot. 0 based.",
      "methodName": "getItemInSlot",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the maximum allowable Radius value, determined from the mod's config",
      "methodName": "getMaxRadius",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Gets the configured maximum Y level for mining",
      "methodName": "getMaxY",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Gets the configured minimum Y level for mining",
      "methodName": "getMinY",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the current radius configured (blocks)",
      "methodName": "getRadius",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Whether Silk Touch mode is enabled or not",
      "methodName": "getSilkTouch",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the size of the Miner's internal inventory",
      "methodName": "getSlotCount",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the state of the Miner's search",
      "methodName": "getState",
      "returns": {
        "type": "String (State)",
        "javaType": "mekanism.common.content.miner.ThreadMinerSearch$State"
      }
    },
    {
      "description": "Get the count of block found but not yet mined",
      "methodName": "getToMine",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Whether the miner is currently running",
      "methodName": "isRunning",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Removes the exactly matching filter from the miner. Requires miner to be stopped/reset first",
      "methodName": "removeFilter",
      "params": [
        {
          "type": "Table (MinerFilter)",
          "javaType": "mekanism.common.content.miner.MinerFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Stop the mining process and reset the Miner to be able to change settings",
      "methodName": "reset",
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the Auto Eject setting",
      "methodName": "setAutoEject",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "eject"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the Auto Pull setting",
      "methodName": "setAutoPull",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "pull"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the Inverse Mode setting. Requires miner to be stopped/reset first",
      "methodName": "setInverseMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "enabled"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the target for Replacement in Inverse Mode. Requires miner to be stopped/reset first",
      "methodName": "setInverseModeReplaceTarget",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "target"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the Inverse Mode Requires Replacement setting. Requires miner to be stopped/reset first",
      "methodName": "setInverseModeRequiresReplacement",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "requiresReplacement"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the maximum Y level for mining. Requires miner to be stopped/reset first",
      "methodName": "setMaxY",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "maxY"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the minimum Y level for mining. Requires miner to be stopped/reset first",
      "methodName": "setMinY",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "minY"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the mining radius (blocks). Requires miner to be stopped/reset first",
      "methodName": "setRadius",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "radius"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Update the Silk Touch setting",
      "methodName": "setSilkTouch",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "silk"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Attempt to start the mining process",
      "methodName": "start",
      "requiresPublicSecurity": true
    },
    {
      "description": "Attempt to stop the mining process",
      "methodName": "stop",
      "requiresPublicSecurity": true
    }
  ],
  "Dimensional Stabilizer": [
    {
      "description": "Sets the chunks in the specified radius to not be kept loaded. The chunk the Stabilizer is in is always loaded. Range: [1, 2]",
      "methodName": "disableChunkLoadingFor",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "radius"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Sets the chunks in the specified radius to be loaded. The chunk the Stabilizer is in is always loaded. Range: [1, 2]",
      "methodName": "enableChunkLoadingFor",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "radius"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the number of chunks being loaded.",
      "methodName": "getChunksLoaded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Check if the Dimensional Stabilizer is configured to load a the specified relative chunk position at x,y (Stabilizer is at 0,0). Range: [-2, 2]",
      "methodName": "isChunkLoadingAt",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "x"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "z"
        }
      ],
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Set if the Dimensional Stabilizer is configured to load a the specified relative position (Stabilizer is at 0,0). True = load the chunk, false = don't load the chunk. Range: [-2, 2]",
      "methodName": "setChunkLoadingAt",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "x"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "z"
        },
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "load"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Toggle loading the specified relative chunk at the relative x,y position (Stabilizer is at 0,0). Just like clicking the button in the GUI. Range: [-2, 2]",
      "methodName": "toggleChunkLoadingAt",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "x"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "z"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Diversion Transporter": [
    {
      "methodName": "decrementMode",
      "params": [
        {
          "type": "String (Direction)",
          "javaType": "net.minecraft.core.Direction",
          "name": "side"
        }
      ]
    },
    {
      "methodName": "getMode",
      "params": [
        {
          "type": "String (Direction)",
          "javaType": "net.minecraft.core.Direction",
          "name": "side"
        }
      ],
      "returns": {
        "type": "String (DiversionControl)",
        "javaType": "mekanism.common.content.network.transmitter.DiversionTransporter$DiversionControl"
      }
    },
    {
      "methodName": "incrementMode",
      "params": [
        {
          "type": "String (Direction)",
          "javaType": "net.minecraft.core.Direction",
          "name": "side"
        }
      ]
    },
    {
      "methodName": "setMode",
      "params": [
        {
          "type": "String (Direction)",
          "javaType": "net.minecraft.core.Direction",
          "name": "side"
        },
        {
          "type": "String (DiversionControl)",
          "javaType": "mekanism.common.content.network.transmitter.DiversionTransporter$DiversionControl",
          "name": "mode"
        }
      ]
    }
  ],
  "Dynamic Tank Multiblock (formed)": [
    {
      "methodName": "decrementContainerEditMode"
    },
    {
      "methodName": "getChemicalTankCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getContainerEditMode",
      "returns": {
        "type": "String (ContainerEditMode)",
        "javaType": "mekanism.common.tile.interfaces.IFluidContainerManager$ContainerEditMode"
      }
    },
    {
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getStored",
      "returns": {
        "type": "Table (ChemicalStack) or Table (FluidStack)",
        "javaExtra": [
          "mekanism.api.chemical.ChemicalStack",
          "net.neoforged.neoforge.fluids.FluidStack"
        ],
        "javaType": "com.mojang.datafixers.util.Either"
      }
    },
    {
      "methodName": "getTankCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "incrementContainerEditMode"
    },
    {
      "methodName": "setContainerEditMode",
      "params": [
        {
          "type": "String (ContainerEditMode)",
          "javaType": "mekanism.common.tile.interfaces.IFluidContainerManager$ContainerEditMode",
          "name": "mode"
        }
      ]
    }
  ],
  "Electric Machine": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Electric Pump": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the buffer tank.",
      "methodName": "getFluid",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the buffer tank.",
      "methodName": "getFluidCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the buffer tank.",
      "methodName": "getFluidFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the buffer tank.",
      "methodName": "getFluidNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "reset",
      "requiresPublicSecurity": true
    }
  ],
  "Electrolytic Separator": [
    {
      "methodName": "decrementLeftOutputDumpingMode",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "decrementRightOutputDumpingMode",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input tank.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the input tank.",
      "methodName": "getInputCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the input tank.",
      "methodName": "getInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input item slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the input tank.",
      "methodName": "getInputNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the left output tank.",
      "methodName": "getLeftOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the left output tank.",
      "methodName": "getLeftOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getLeftOutputDumpingMode",
      "returns": {
        "type": "String (GasMode)",
        "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode"
      }
    },
    {
      "description": "Get the filled percentage of the left output tank.",
      "methodName": "getLeftOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the left output item slot.",
      "methodName": "getLeftOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the left output tank.",
      "methodName": "getLeftOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the right output tank.",
      "methodName": "getRightOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the right output tank.",
      "methodName": "getRightOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getRightOutputDumpingMode",
      "returns": {
        "type": "String (GasMode)",
        "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode"
      }
    },
    {
      "description": "Get the filled percentage of the right output tank.",
      "methodName": "getRightOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the right output item slot.",
      "methodName": "getRightOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the right output tank.",
      "methodName": "getRightOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "incrementLeftOutputDumpingMode",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "incrementRightOutputDumpingMode",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setLeftOutputDumpingMode",
      "params": [
        {
          "type": "String (GasMode)",
          "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setRightOutputDumpingMode",
      "params": [
        {
          "type": "String (GasMode)",
          "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Energy Cube": [
    {
      "description": "Get the contents of the charge slot.",
      "methodName": "getChargeItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the discharge slot.",
      "methodName": "getDischargeItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Factory Machine": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getInput",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "process"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getOutput",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "process"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getRecipeProgress",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "process"
        }
      ],
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Total number of ticks it takes currently for the recipe to complete",
      "methodName": "getTicksRequired",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "isAutoSortEnabled",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setAutoSort",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "enabled"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Filter Wrapper": [
    {
      "methodName": "getFilterType",
      "returns": {
        "type": "String (FilterType)",
        "javaType": "mekanism.common.content.filter.FilterType"
      }
    },
    {
      "methodName": "isEnabled",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setEnabled",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "enabled"
        }
      ]
    }
  ],
  "Filter Wrapper (Digital Miner)": [
    {
      "methodName": "clone",
      "returns": {
        "type": "Table (MinerFilter)",
        "javaType": "mekanism.common.content.miner.MinerFilter"
      }
    },
    {
      "methodName": "getReplaceTarget",
      "returns": {
        "type": "String (Item)",
        "javaType": "net.minecraft.world.item.Item"
      }
    },
    {
      "methodName": "getRequiresReplacement",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "hasBlacklistedElement",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setReplaceTarget",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "value"
        }
      ]
    },
    {
      "methodName": "setRequiresReplacement",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ]
    }
  ],
  "Filter Wrapper (ItemStack)": [
    {
      "methodName": "getItemStack",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "setItem",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "item"
        }
      ]
    },
    {
      "methodName": "setItemStack",
      "params": [
        {
          "type": "Table (ItemStack)",
          "javaType": "net.minecraft.world.item.ItemStack",
          "name": "stack"
        }
      ]
    }
  ],
  "Filter Wrapper (Logistical Sorter)": [
    {
      "methodName": "clone",
      "returns": {
        "type": "Table (SorterFilter)",
        "javaType": "mekanism.common.content.transporter.SorterFilter"
      }
    },
    {
      "methodName": "getAllowDefault",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getColor",
      "returns": {
        "type": "String (EnumColor)",
        "javaType": "mekanism.api.text.EnumColor"
      }
    },
    {
      "methodName": "getMax",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getMin",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getSizeMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setAllowDefault",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ]
    },
    {
      "methodName": "setColor",
      "params": [
        {
          "type": "String (EnumColor)",
          "javaType": "mekanism.api.text.EnumColor",
          "name": "value"
        }
      ]
    },
    {
      "methodName": "setMinMax",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "min"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "max"
        }
      ]
    },
    {
      "methodName": "setSizeMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ]
    }
  ],
  "Filter Wrapper (Mod Id)": [
    {
      "methodName": "getModID",
      "returns": {
        "type": "String",
        "javaType": "java.lang.String"
      }
    },
    {
      "methodName": "setModID",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "id"
        }
      ]
    }
  ],
  "Filter Wrapper (Oredictionificator Item)": [
    {
      "methodName": "getSelectedOutput",
      "returns": {
        "type": "String (Item)",
        "javaType": "net.minecraft.world.item.Item"
      }
    },
    {
      "methodName": "setSelectedOutput",
      "params": [
        {
          "type": "String (Item)",
          "javaType": "net.minecraft.world.item.Item",
          "name": "item"
        }
      ]
    }
  ],
  "Filter Wrapper (Oredictionificator)": [
    {
      "methodName": "clone",
      "returns": {
        "type": "Table (OredictionificatorFilter)",
        "javaType": "mekanism.common.content.oredictionificator.OredictionificatorFilter"
      }
    },
    {
      "methodName": "getFilter",
      "returns": {
        "type": "String",
        "javaType": "java.lang.String"
      }
    },
    {
      "methodName": "setFilter",
      "params": [
        {
          "type": "String (ResourceLocation)",
          "javaType": "net.minecraft.resources.ResourceLocation",
          "name": "tag"
        }
      ]
    }
  ],
  "Filter Wrapper (QIO)": [
    {
      "methodName": "clone",
      "returns": {
        "type": "Table (QIOFilter)",
        "javaType": "mekanism.common.content.qio.filter.QIOFilter"
      }
    }
  ],
  "Filter Wrapper (Tag)": [
    {
      "methodName": "getTagName",
      "returns": {
        "type": "String",
        "javaType": "java.lang.String"
      }
    },
    {
      "methodName": "setTagName",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ]
    }
  ],
  "Fission Reactor Logic Adapter": [
    {
      "methodName": "getLogicMode",
      "returns": {
        "type": "String (FissionReactorLogic)",
        "javaType": "mekanism.generators.common.tile.fission.TileEntityFissionReactorLogicAdapter$FissionReactorLogic"
      }
    },
    {
      "methodName": "getRedstoneLogicStatus",
      "returns": {
        "type": "String (RedstoneStatus)",
        "javaType": "mekanism.generators.common.tile.fission.TileEntityFissionReactorLogicAdapter$RedstoneStatus"
      }
    },
    {
      "methodName": "setLogicMode",
      "params": [
        {
          "type": "String (FissionReactorLogic)",
          "javaType": "mekanism.generators.common.tile.fission.TileEntityFissionReactorLogicAdapter$FissionReactorLogic",
          "name": "logicType"
        }
      ]
    }
  ],
  "Fission Reactor Multiblock (formed)": [
    {
      "description": "Must be disabled, and if meltdowns are disabled must not have been force disabled",
      "methodName": "activate"
    },
    {
      "description": "Actual burn rate as it may be lower if say there is not enough fuel",
      "methodName": "getActualBurnRate",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getBoilEfficiency",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Configured burn rate",
      "methodName": "getBurnRate",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getCoolant",
      "returns": {
        "type": "Table (ChemicalStack) or Table (FluidStack)",
        "javaExtra": [
          "mekanism.api.chemical.ChemicalStack",
          "net.neoforged.neoforge.fluids.FluidStack"
        ],
        "javaType": "com.mojang.datafixers.util.Either"
      }
    },
    {
      "methodName": "getCoolantCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getCoolantFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getCoolantNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getDamagePercent",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fuel tank.",
      "methodName": "getFuel",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "methodName": "getFuelAssemblies",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the capacity of the fuel tank.",
      "methodName": "getFuelCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the fuel tank.",
      "methodName": "getFuelFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the fuel tank.",
      "methodName": "getFuelNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getFuelSurfaceArea",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getHeatCapacity",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the heated coolant.",
      "methodName": "getHeatedCoolant",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the heated coolant.",
      "methodName": "getHeatedCoolantCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the heated coolant.",
      "methodName": "getHeatedCoolantFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the heated coolant.",
      "methodName": "getHeatedCoolantNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getHeatingRate",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getMaxBurnRate",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "true -> active, false -> off",
      "methodName": "getStatus",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the temperature of the reactor in Kelvin.",
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the waste tank.",
      "methodName": "getWaste",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the waste tank.",
      "methodName": "getWasteCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the waste tank.",
      "methodName": "getWasteFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the waste tank.",
      "methodName": "getWasteNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "isForceDisabled",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Must be enabled",
      "methodName": "scram"
    },
    {
      "methodName": "setBurnRate",
      "params": [
        {
          "type": "Number (double)",
          "javaType": "double",
          "name": "rate"
        }
      ]
    }
  ],
  "Fission Reactor Port": [
    {
      "methodName": "decrementMode"
    },
    {
      "methodName": "getMode",
      "returns": {
        "type": "String (FissionPortMode)",
        "javaType": "mekanism.generators.common.block.attribute.AttributeStateFissionPortMode$FissionPortMode"
      }
    },
    {
      "methodName": "incrementMode"
    },
    {
      "methodName": "setMode",
      "params": [
        {
          "type": "String (FissionPortMode)",
          "javaType": "mekanism.generators.common.block.attribute.AttributeStateFissionPortMode$FissionPortMode",
          "name": "mode"
        }
      ]
    }
  ],
  "Fluid Tank": [
    {
      "methodName": "decrementContainerEditMode",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the capacity of the tank.",
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getContainerEditMode",
      "returns": {
        "type": "String (ContainerEditMode)",
        "javaType": "mekanism.common.tile.interfaces.IFluidContainerManager$ContainerEditMode"
      }
    },
    {
      "description": "Get the filled percentage of the tank.",
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the tank.",
      "methodName": "getNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the tank.",
      "methodName": "getStored",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "methodName": "incrementContainerEditMode",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setContainerEditMode",
      "params": [
        {
          "type": "String (ContainerEditMode)",
          "javaType": "mekanism.common.tile.interfaces.IFluidContainerManager$ContainerEditMode",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Fluidic Plenisher": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the buffer tank.",
      "methodName": "getFluid",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the buffer tank.",
      "methodName": "getFluidCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the buffer tank.",
      "methodName": "getFluidFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the buffer tank.",
      "methodName": "getFluidNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "reset",
      "requiresPublicSecurity": true
    }
  ],
  "Formulaic Assemblicator": [
    {
      "description": "Requires recipe and auto mode to be disabled",
      "methodName": "craftAvailableItems",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires recipe and auto mode to be disabled",
      "methodName": "craftSingleItem",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires auto mode to be disabled",
      "methodName": "emptyGrid",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires an unencoded formula in the formula slot and a valid recipe",
      "methodName": "encodeFormula",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires auto mode to be disabled",
      "methodName": "fillGrid",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires valid encoded formula",
      "methodName": "getAutoMode",
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getCraftingInputSlot",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getCraftingOutputSlot",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getCraftingOutputSlots",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getExcessRemainingItems",
      "returns": {
        "type": "List (Table (ItemStack))",
        "javaExtra": [
          "net.minecraft.world.item.ItemStack"
        ],
        "javaType": "net.minecraft.core.NonNullList"
      }
    },
    {
      "description": "Get the contents of the formula slot.",
      "methodName": "getFormulaItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getItemInSlot",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getRecipeProgress",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getSlots",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Requires valid encoded formula",
      "methodName": "getStockControl",
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getTicksRequired",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "hasRecipe",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "hasValidFormula",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Requires valid encoded formula",
      "methodName": "setAutoMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires valid encoded formula",
      "methodName": "setStockControl",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Fuelwood Heater": [
    {
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fuel slot.",
      "methodName": "getFuelItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the temperature of the heater in Kelvin.",
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getTransferLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    }
  ],
  "Fusion Reactor Logic Adapter": [
    {
      "methodName": "getLogicMode",
      "returns": {
        "type": "String (FusionReactorLogic)",
        "javaType": "mekanism.generators.common.tile.fusion.TileEntityFusionReactorLogicAdapter$FusionReactorLogic"
      }
    },
    {
      "methodName": "isActiveCooledLogic",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setActiveCooledLogic",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "active"
        }
      ]
    },
    {
      "methodName": "setLogicMode",
      "params": [
        {
          "type": "String (FusionReactorLogic)",
          "javaType": "mekanism.generators.common.tile.fusion.TileEntityFusionReactorLogicAdapter$FusionReactorLogic",
          "name": "logicType"
        }
      ]
    }
  ],
  "Fusion Reactor Multiblock (formed)": [
    {
      "methodName": "getCaseTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fuel tank.",
      "methodName": "getDTFuel",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the fuel tank.",
      "methodName": "getDTFuelCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the fuel tank.",
      "methodName": "getDTFuelFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the fuel tank.",
      "methodName": "getDTFuelNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the deuterium tank.",
      "methodName": "getDeuterium",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the deuterium tank.",
      "methodName": "getDeuteriumCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the deuterium tank.",
      "methodName": "getDeuteriumFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the deuterium tank.",
      "methodName": "getDeuteriumNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the Hohlraum slot.",
      "methodName": "getHohlraum",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "true -> water cooled, false -> air cooled",
      "methodName": "getIgnitionTemperature",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "active"
        }
      ],
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getInjectionRate",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "true -> water cooled, false -> air cooled",
      "methodName": "getMaxCasingTemperature",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "active"
        }
      ],
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "true -> water cooled, false -> air cooled",
      "methodName": "getMaxPlasmaTemperature",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "active"
        }
      ],
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "true -> water cooled, false -> air cooled",
      "methodName": "getMinInjectionRate",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "active"
        }
      ],
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getPassiveGeneration",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "active"
        }
      ],
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getPlasmaTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getProductionRate",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the steam tank.",
      "methodName": "getSteam",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the steam tank.",
      "methodName": "getSteamCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the steam tank.",
      "methodName": "getSteamFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the steam tank.",
      "methodName": "getSteamNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getTransferLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the tritium tank.",
      "methodName": "getTritium",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the tritium tank.",
      "methodName": "getTritiumCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the tritium tank.",
      "methodName": "getTritiumFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the tritium tank.",
      "methodName": "getTritiumNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the water tank.",
      "methodName": "getWater",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the water tank.",
      "methodName": "getWaterCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the water tank.",
      "methodName": "getWaterFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the water tank.",
      "methodName": "getWaterNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Checks if a reaction is occurring.",
      "methodName": "isBurning",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setInjectionRate",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "rate"
        }
      ]
    }
  ],
  "Fusion Reactor Port": [
    {
      "description": "true -> output, false -> input",
      "methodName": "getMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "true -> output, false -> input",
      "methodName": "setMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "output"
        }
      ]
    }
  ],
  "Gas Generator": [
    {
      "methodName": "getBurnRate",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the energy item slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the fuel tank.",
      "methodName": "getFuel",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the fuel tank.",
      "methodName": "getFuelCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the fuel tank.",
      "methodName": "getFuelFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fuel item slot.",
      "methodName": "getFuelItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the fuel tank.",
      "methodName": "getFuelNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Generator": [
    {
      "methodName": "getMaxOutput",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the amount of energy produced by this generator in the last tick.",
      "methodName": "getProductionRate",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    }
  ],
  "Generic Mekanism Machine": [
    {
      "methodName": "getComparatorLevel",
      "restriction": "COMPARATOR",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getDirection",
      "restriction": "DIRECTIONAL",
      "returns": {
        "type": "String (Direction)",
        "javaType": "net.minecraft.core.Direction"
      }
    },
    {
      "methodName": "getEnergy",
      "restriction": "ENERGY",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getEnergyFilledPercentage",
      "restriction": "ENERGY",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getEnergyNeeded",
      "restriction": "ENERGY",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getMaxEnergy",
      "restriction": "ENERGY",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getRedstoneMode",
      "restriction": "REDSTONE_CONTROL",
      "returns": {
        "type": "String (RedstoneControl)",
        "javaType": "mekanism.common.tile.interfaces.IRedstoneControl$RedstoneControl"
      }
    },
    {
      "methodName": "setRedstoneMode",
      "params": [
        {
          "type": "String (RedstoneControl)",
          "javaType": "mekanism.common.tile.interfaces.IRedstoneControl$RedstoneControl",
          "name": "type"
        }
      ],
      "requiresPublicSecurity": true,
      "restriction": "REDSTONE_CONTROL"
    }
  ],
  "Heat Generator": [
    {
      "description": "Get the contents of the energy item slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fuel item slot.",
      "methodName": "getFuelItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the lava tank.",
      "methodName": "getLava",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the lava tank.",
      "methodName": "getLavaCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the lava tank.",
      "methodName": "getLavaFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the lava tank.",
      "methodName": "getLavaNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the temperature of the generator in Kelvin.",
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getTransferLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    }
  ],
  "Induction Matrix Multiblock (formed)": [
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getInstalledCells",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getInstalledProviders",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getLastInput",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getLastOutput",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getTransferCap",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    }
  ],
  "Induction Matrix Port": [
    {
      "description": "true -> output, false -> input.",
      "methodName": "getMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "true -> output, false -> input",
      "methodName": "setMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "output"
        }
      ]
    }
  ],
  "Industrial Turbine Multiblock (formed)": [
    {
      "methodName": "decrementDumpingMode"
    },
    {
      "methodName": "getBlades",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getCoils",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getCondensers",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getDispersers",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getDumpingMode",
      "returns": {
        "type": "String (GasMode)",
        "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode"
      }
    },
    {
      "methodName": "getFlowRate",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getLastSteamInputRate",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getMaxFlowRate",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getMaxProduction",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getMaxWaterOutput",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getProductionRate",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the steam tank.",
      "methodName": "getSteam",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the steam tank.",
      "methodName": "getSteamCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the steam tank.",
      "methodName": "getSteamFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the steam tank.",
      "methodName": "getSteamNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getVents",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "incrementDumpingMode"
    },
    {
      "methodName": "setDumpingMode",
      "params": [
        {
          "type": "String (GasMode)",
          "javaType": "mekanism.common.tile.TileEntityChemicalTank$GasMode",
          "name": "mode"
        }
      ]
    }
  ],
  "Isotopic Centrifuge": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input tank.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the input tank.",
      "methodName": "getInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the input tank.",
      "methodName": "getInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the input tank.",
      "methodName": "getInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Laser": [
    {
      "methodName": "getDiggingPos",
      "returns": {
        "type": "Table (BlockPos)",
        "javaType": "net.minecraft.core.BlockPos"
      }
    }
  ],
  "Laser Amplifier": [
    {
      "methodName": "getDelay",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getMaxThreshold",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getMinThreshold",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getRedstoneOutputMode",
      "returns": {
        "type": "String (RedstoneOutput)",
        "javaType": "mekanism.common.tile.laser.TileEntityLaserAmplifier$RedstoneOutput"
      }
    },
    {
      "methodName": "setDelay",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "delay"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setMaxThreshold",
      "params": [
        {
          "type": "Number (FloatingLong)",
          "javaType": "mekanism.api.math.FloatingLong",
          "name": "threshold"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setMinThreshold",
      "params": [
        {
          "type": "Number (FloatingLong)",
          "javaType": "mekanism.api.math.FloatingLong",
          "name": "threshold"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setRedstoneOutputMode",
      "params": [
        {
          "type": "String (RedstoneOutput)",
          "javaType": "mekanism.common.tile.laser.TileEntityLaserAmplifier$RedstoneOutput",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Laser Tractor Beam": [
    {
      "methodName": "getItemInSlot",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getSlotCount",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    }
  ],
  "Logistical Sorter": [
    {
      "methodName": "addFilter",
      "params": [
        {
          "type": "Table (SorterFilter)",
          "javaType": "mekanism.common.content.transporter.SorterFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "clearDefaultColor",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "decrementDefaultColor",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "getAutoMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getDefaultColor",
      "returns": {
        "type": "String (EnumColor)",
        "javaType": "mekanism.api.text.EnumColor"
      }
    },
    {
      "methodName": "getFilters",
      "returns": {
        "type": "List (Table (SorterFilter))",
        "javaExtra": [
          "mekanism.common.content.transporter.SorterFilter"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "methodName": "incrementDefaultColor",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "isRoundRobin",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "isSingle",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "removeFilter",
      "params": [
        {
          "type": "Table (SorterFilter)",
          "javaType": "mekanism.common.content.transporter.SorterFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setAutoMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setDefaultColor",
      "params": [
        {
          "type": "String (EnumColor)",
          "javaType": "mekanism.api.text.EnumColor",
          "name": "color"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setRoundRobin",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setSingle",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Machine with Ejector Component": [
    {
      "methodName": "clearInputColor",
      "params": [
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "clearOutputColor",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "decrementInputColor",
      "params": [
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "decrementOutputColor",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "getInputColor",
      "params": [
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "returns": {
        "type": "String (EnumColor)",
        "javaType": "mekanism.api.text.EnumColor"
      }
    },
    {
      "methodName": "getOutputColor",
      "returns": {
        "type": "String (EnumColor)",
        "javaType": "mekanism.api.text.EnumColor"
      }
    },
    {
      "methodName": "hasStrictInput",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "incrementInputColor",
      "params": [
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "incrementOutputColor",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setInputColor",
      "params": [
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        },
        {
          "type": "String (EnumColor)",
          "javaType": "mekanism.api.text.EnumColor",
          "name": "color"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setOutputColor",
      "params": [
        {
          "type": "String (EnumColor)",
          "javaType": "mekanism.api.text.EnumColor",
          "name": "color"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setStrictInput",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "strict"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Machine with Recipe Progress": [
    {
      "methodName": "getRecipeProgress",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getTicksRequired",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    }
  ],
  "Machine with Security Component": [
    {
      "methodName": "getOwnerName",
      "returns": {
        "type": "String",
        "javaType": "java.lang.String"
      }
    },
    {
      "methodName": "getOwnerUUID",
      "returns": {
        "type": "String (UUID)",
        "javaType": "java.util.UUID"
      }
    },
    {
      "methodName": "getSecurityMode",
      "returns": {
        "type": "String (SecurityMode)",
        "javaType": "mekanism.api.security.SecurityMode"
      }
    }
  ],
  "Machine with Side Configuration Component": [
    {
      "methodName": "canEject",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        }
      ],
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "decrementMode",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        },
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "getConfigurableTypes",
      "returns": {
        "type": "List (String (TransmissionType))",
        "javaExtra": [
          "mekanism.common.lib.transmitter.TransmissionType"
        ],
        "javaType": "java.util.List"
      }
    },
    {
      "methodName": "getMode",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        },
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "String (DataType)",
        "javaType": "mekanism.common.tile.component.config.DataType"
      }
    },
    {
      "methodName": "getSupportedModes",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "List (String (DataType))",
        "javaExtra": [
          "mekanism.common.tile.component.config.DataType"
        ],
        "javaType": "java.util.Set"
      }
    },
    {
      "methodName": "incrementMode",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        },
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "isEjecting",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        }
      ],
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setEjecting",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        },
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "ejecting"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setMode",
      "params": [
        {
          "type": "String (TransmissionType)",
          "javaType": "mekanism.common.lib.transmitter.TransmissionType",
          "name": "type"
        },
        {
          "type": "String (RelativeSide)",
          "javaType": "mekanism.api.RelativeSide",
          "name": "side"
        },
        {
          "type": "String (DataType)",
          "javaType": "mekanism.common.tile.component.config.DataType",
          "name": "mode"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Machine with Upgrade Component": [
    {
      "methodName": "getInstalledUpgrades",
      "returns": {
        "type": "Table (String (Upgrade) => Number (int))",
        "javaExtra": [
          "mekanism.api.Upgrade",
          "java.lang.Integer"
        ],
        "javaType": "java.util.Map"
      }
    },
    {
      "methodName": "getSupportedUpgrades",
      "returns": {
        "type": "List (String (Upgrade))",
        "javaExtra": [
          "mekanism.api.Upgrade"
        ],
        "javaType": "java.util.Set"
      }
    }
  ],
  "Mechanical Pipe": [
    {
      "methodName": "getBuffer",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Metallurgic Infuser": [
    {
      "methodName": "dumpInfuseType",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the infusion buffer.",
      "methodName": "getInfuseType",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the infusion buffer.",
      "methodName": "getInfuseTypeCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the infusion buffer.",
      "methodName": "getInfuseTypeFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the infusion (extra) input slot.",
      "methodName": "getInfuseTypeItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the infusion buffer.",
      "methodName": "getInfuseTypeNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Metallurgic Infuser Factory": [
    {
      "description": "Empty the contents of the infusion buffer into the environment",
      "methodName": "dumpInfuseType",
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the contents of the infusion buffer.",
      "methodName": "getInfuseType",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the infusion buffer.",
      "methodName": "getInfuseTypeCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the infusion buffer.",
      "methodName": "getInfuseTypeFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the infusion extra input slot.",
      "methodName": "getInfuseTypeItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the infusion buffer.",
      "methodName": "getInfuseTypeNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Modification Station": [
    {
      "description": "Get the contents of the module holder slot (suit, tool, etc).",
      "methodName": "getContainerItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the module slot.",
      "methodName": "getModuleItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Multiblock": [
    {
      "methodName": "isFormed",
      "restriction": "MULTIBLOCK",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    }
  ],
  "Multiblock (formed)": [
    {
      "methodName": "getHeight",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getLength",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getMaxPos",
      "returns": {
        "type": "Table (BlockPos)",
        "javaType": "net.minecraft.core.BlockPos"
      }
    },
    {
      "methodName": "getMinPos",
      "returns": {
        "type": "Table (BlockPos)",
        "javaType": "net.minecraft.core.BlockPos"
      }
    },
    {
      "methodName": "getWidth",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    }
  ],
  "Nutritional Liquifier": [
    {
      "description": "Get the contents of the fillable container slot.",
      "methodName": "getContainerFillItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the filled container output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    }
  ],
  "Oredictionificator": [
    {
      "methodName": "addFilter",
      "params": [
        {
          "type": "Table (OredictionificatorItemFilter)",
          "javaType": "mekanism.common.content.oredictionificator.OredictionificatorItemFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getFilters",
      "returns": {
        "type": "List (Table (OredictionificatorItemFilter))",
        "javaExtra": [
          "mekanism.common.content.oredictionificator.OredictionificatorItemFilter"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "removeFilter",
      "params": [
        {
          "type": "Table (OredictionificatorItemFilter)",
          "javaType": "mekanism.common.content.oredictionificator.OredictionificatorItemFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    }
  ],
  "Painting Machine": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the paintable item slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the pigment slot.",
      "methodName": "getInputPigmentItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the painted item slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the pigment tank.",
      "methodName": "getPigmentInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the pigment tank.",
      "methodName": "getPigmentInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the pigment tank.",
      "methodName": "getPigmentInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the pigment tank.",
      "methodName": "getPigmentInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Pigment Extractor": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the pigment tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the pigment tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the pigment tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the pigment tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Pigment Mixer": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the left pigment tank.",
      "methodName": "getLeftInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the left pigment tank.",
      "methodName": "getLeftInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the left pigment tank.",
      "methodName": "getLeftInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the left input slot.",
      "methodName": "getLeftInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the left pigment tank.",
      "methodName": "getLeftInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output pigment tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output pigment tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output pigment tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output pigment tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the right pigment tank.",
      "methodName": "getRightInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the right pigment tank.",
      "methodName": "getRightInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the right pigment tank.",
      "methodName": "getRightInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the right input slot.",
      "methodName": "getRightInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the right pigment tank.",
      "methodName": "getRightInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "Precision Sawmill": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the secondary output slot.",
      "methodName": "getSecondaryOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Pressurized Reaction Chamber": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the fluid input.",
      "methodName": "getInputFluid",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the fluid input.",
      "methodName": "getInputFluidCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the fluid input.",
      "methodName": "getInputFluidFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the fluid input.",
      "methodName": "getInputFluidNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the gas input.",
      "methodName": "getInputGas",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas input.",
      "methodName": "getInputGasCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas input.",
      "methodName": "getInputGasFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the gas input.",
      "methodName": "getInputGasNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the item input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the gas output.",
      "methodName": "getOutputGas",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas output.",
      "methodName": "getOutputGasCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas output.",
      "methodName": "getOutputGasFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the gas output.",
      "methodName": "getOutputGasNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the item output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Pressurized Tube": [
    {
      "methodName": "getBuffer",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    }
  ],
  "QIO Dashboard": [
    {
      "methodName": "getCraftingInput",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "window"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getCraftingOutput",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "window"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "QIO Drive Array": [
    {
      "methodName": "getDrive",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getDriveStatus",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "slot"
        }
      ],
      "returns": {
        "type": "String (DriveStatus)",
        "javaType": "mekanism.common.tile.qio.TileEntityQIODriveArray$DriveStatus"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyItemCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyItemCount",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyItemPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyItemTypeCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyItemTypeCount",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyItemTypePercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getSlotCount",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    }
  ],
  "QIO Exporter": [
    {
      "methodName": "getExportWithoutFilter",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setExportsWithoutFilter",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "QIO Importer": [
    {
      "methodName": "getImportWithoutFilter",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setImportsWithoutFilter",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "QIO Machine": [
    {
      "description": "Requires frequency to not already exist and for it to be public so that it can make it as the player who owns the block. Also sets the frequency after creation",
      "methodName": "createFrequency",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "decrementFrequencyColor",
      "requiresPublicSecurity": true
    },
    {
      "description": "Lists public frequencies",
      "methodName": "getFrequencies",
      "returns": {
        "type": "List (Table (QIOFrequency))",
        "javaExtra": [
          "mekanism.common.content.qio.QIOFrequency"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequency",
      "returns": {
        "type": "Table (QIOFrequency)",
        "javaType": "mekanism.common.content.qio.QIOFrequency"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyColor",
      "returns": {
        "type": "String (EnumColor)",
        "javaType": "mekanism.api.text.EnumColor"
      }
    },
    {
      "methodName": "hasFrequency",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "incrementFrequencyColor",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a public frequency to exist",
      "methodName": "setFrequency",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "setFrequencyColor",
      "params": [
        {
          "type": "String (EnumColor)",
          "javaType": "mekanism.api.text.EnumColor",
          "name": "color"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "QIO Machine with Filter": [
    {
      "methodName": "addFilter",
      "params": [
        {
          "type": "Table (QIOFilter)",
          "javaType": "mekanism.common.content.qio.filter.QIOFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getFilters",
      "returns": {
        "type": "List (Table (QIOFilter))",
        "javaExtra": [
          "mekanism.common.content.qio.filter.QIOFilter"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "methodName": "removeFilter",
      "params": [
        {
          "type": "Table (QIOFilter)",
          "javaType": "mekanism.common.content.qio.filter.QIOFilter",
          "name": "filter"
        }
      ],
      "requiresPublicSecurity": true,
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    }
  ],
  "QIO Redstone Adapter": [
    {
      "methodName": "clearTargetItem",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "getFuzzyMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "getTargetItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "getTriggerAmount",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "invertSignal",
      "requiresPublicSecurity": true
    },
    {
      "methodName": "isInverted",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setFuzzyMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "fuzzy"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setSignalInverted",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "inverted"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setTargetItem",
      "params": [
        {
          "type": "String (ResourceLocation)",
          "javaType": "net.minecraft.resources.ResourceLocation",
          "name": "itemName"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "setTriggerAmount",
      "params": [
        {
          "type": "Number (long)",
          "javaType": "long",
          "name": "amount"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "methodName": "toggleFuzzyMode",
      "requiresPublicSecurity": true
    }
  ],
  "Quantum Entangloporter": [
    {
      "description": "Requires frequency to not already exist and for it to be public so that it can make it as the player who owns the block. Also sets the frequency after creation",
      "methodName": "createFrequency",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Get the contents of the fluid buffer.",
      "methodName": "getBufferFluid",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the fluid buffer.",
      "methodName": "getBufferFluidCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the fluid buffer.",
      "methodName": "getBufferFluidFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the fluid buffer.",
      "methodName": "getBufferFluidNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the gas buffer.",
      "methodName": "getBufferGas",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas buffer.",
      "methodName": "getBufferGasCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas buffer.",
      "methodName": "getBufferGasFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the gas buffer.",
      "methodName": "getBufferGasNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the infusion buffer.",
      "methodName": "getBufferInfuseType",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the infusion buffer.",
      "methodName": "getBufferInfuseTypeCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the infusion buffer.",
      "methodName": "getBufferInfuseTypeFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the infusion buffer.",
      "methodName": "getBufferInfuseTypeNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getBufferItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the pigment buffer.",
      "methodName": "getBufferPigment",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the pigment buffer.",
      "methodName": "getBufferPigmentCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the pigment buffer.",
      "methodName": "getBufferPigmentFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the pigment buffer.",
      "methodName": "getBufferPigmentNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the slurry buffer.",
      "methodName": "getBufferSlurry",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the slurry buffer.",
      "methodName": "getBufferSlurryCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the slurry buffer.",
      "methodName": "getBufferSlurryFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the slurry buffer.",
      "methodName": "getBufferSlurryNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "May not be accurate if there is no frequency",
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Lists public frequencies",
      "methodName": "getFrequencies",
      "returns": {
        "type": "List (Table (InventoryFrequency))",
        "javaExtra": [
          "mekanism.common.content.entangloporter.InventoryFrequency"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequency",
      "returns": {
        "type": "Table (InventoryFrequency)",
        "javaType": "mekanism.common.content.entangloporter.InventoryFrequency"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "May not be accurate if there is no frequency",
      "methodName": "getTransferLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "hasFrequency",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Requires a public frequency to exist",
      "methodName": "setFrequency",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Radioactive Waste Barrel": [
    {
      "description": "Get the capacity of the barrel.",
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the barrel.",
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the barrel.",
      "methodName": "getNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the barrel.",
      "methodName": "getStored",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    }
  ],
  "Resistive Heater": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getEnergyUsed",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the temperature of the heater in Kelvin.",
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getTransferLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "setEnergyUsage",
      "params": [
        {
          "type": "Number (FloatingLong)",
          "javaType": "mekanism.api.math.FloatingLong",
          "name": "usage"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Rotary Condensentrator": [
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the energy used in the last tick by the machine",
      "methodName": "getEnergyUsage",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "description": "Get the contents of the fluid tank.",
      "methodName": "getFluid",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the fluid tank.",
      "methodName": "getFluidCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the fluid tank.",
      "methodName": "getFluidFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the fluid item input slot.",
      "methodName": "getFluidItemInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the fluid item ouput slot.",
      "methodName": "getFluidItemOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the fluid tank.",
      "methodName": "getFluidNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the gas tank.",
      "methodName": "getGas",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the gas tank.",
      "methodName": "getGasCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the gas tank.",
      "methodName": "getGasFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the gas item input slot.",
      "methodName": "getGasItemInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the gas item output slot.",
      "methodName": "getGasItemOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the gas tank.",
      "methodName": "getGasNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "isCondensentrating",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "methodName": "setCondensentrating",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "value"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "SPS Multiblock (formed)": [
    {
      "methodName": "getCoils",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the input tank.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the input tank.",
      "methodName": "getInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the input tank.",
      "methodName": "getInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the input tank.",
      "methodName": "getInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getProcessRate",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    }
  ],
  "SPS Port": [
    {
      "description": "true -> output, false -> input.",
      "methodName": "getMode",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "true -> output, false -> input.",
      "methodName": "setMode",
      "params": [
        {
          "type": "boolean",
          "javaType": "boolean",
          "name": "output"
        }
      ]
    }
  ],
  "Sawing Factory": [
    {
      "methodName": "getSecondaryOutput",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "process"
        }
      ],
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Seismic Vibrator": [
    {
      "methodName": "getBlockAt",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "chunkRelativeX"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "y"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "chunkRelativeZ"
        }
      ],
      "returns": {
        "type": "Table (BlockState)",
        "javaType": "net.minecraft.world.level.block.state.BlockState"
      }
    },
    {
      "description": "Get a column info, table key is the Y level",
      "methodName": "getColumnAt",
      "params": [
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "chunkRelativeX"
        },
        {
          "type": "Number (int)",
          "javaType": "int",
          "name": "chunkRelativeZ"
        }
      ],
      "returns": {
        "type": "Table (Number (int) => Table (BlockState))",
        "javaExtra": [
          "java.lang.Integer",
          "net.minecraft.world.level.block.state.BlockState"
        ],
        "javaType": "java.util.Map"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "isVibrating",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    }
  ],
  "Solar Generator": [
    {
      "methodName": "canSeeSun",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the contents of the energy item slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    }
  ],
  "Solar Neutron Activator": [
    {
      "methodName": "canSeeSun",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Get the contents of the input tank.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the input tank.",
      "methodName": "getInputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the input tank.",
      "methodName": "getInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input slot.",
      "methodName": "getInputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the input tank.",
      "methodName": "getInputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (ChemicalStack)",
        "javaType": "mekanism.api.chemical.ChemicalStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output slot.",
      "methodName": "getOutputItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (long)",
        "javaType": "long"
      }
    },
    {
      "methodName": "getPeakProductionRate",
      "returns": {
        "type": "Number (float)",
        "javaType": "float"
      }
    },
    {
      "methodName": "getProductionRate",
      "returns": {
        "type": "Number (float)",
        "javaType": "float"
      }
    }
  ],
  "Teleporter": [
    {
      "description": "Requires frequency to not already exist and for it to be public so that it can make it as the player who owns the block. Also sets the frequency after creation",
      "methodName": "createFrequency",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "decrementFrequencyColor",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getActiveTeleporters",
      "returns": {
        "type": "List (Table (GlobalPos))",
        "javaExtra": [
          "net.minecraft.core.GlobalPos"
        ],
        "javaType": "java.util.Set"
      }
    },
    {
      "description": "Get the contents of the energy slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Lists public frequencies",
      "methodName": "getFrequencies",
      "returns": {
        "type": "List (Table (TeleporterFrequency))",
        "javaExtra": [
          "mekanism.common.content.teleporter.TeleporterFrequency"
        ],
        "javaType": "java.util.Collection"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequency",
      "returns": {
        "type": "Table (TeleporterFrequency)",
        "javaType": "mekanism.common.content.teleporter.TeleporterFrequency"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "getFrequencyColor",
      "returns": {
        "type": "String (EnumColor)",
        "javaType": "mekanism.api.text.EnumColor"
      }
    },
    {
      "methodName": "getStatus",
      "returns": {
        "type": "String",
        "javaType": "java.lang.String"
      }
    },
    {
      "methodName": "hasFrequency",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "incrementFrequencyColor",
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a public frequency to exist",
      "methodName": "setFrequency",
      "params": [
        {
          "type": "String",
          "javaType": "java.lang.String",
          "name": "name"
        }
      ],
      "requiresPublicSecurity": true
    },
    {
      "description": "Requires a frequency to be selected",
      "methodName": "setFrequencyColor",
      "params": [
        {
          "type": "String (EnumColor)",
          "javaType": "mekanism.api.text.EnumColor",
          "name": "color"
        }
      ],
      "requiresPublicSecurity": true
    }
  ],
  "Thermal Evaporation Multiblock (formed)": [
    {
      "methodName": "getActiveSolars",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getEnvironmentalLoss",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input tank.",
      "methodName": "getInput",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the input tank.",
      "methodName": "getInputCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the input tank.",
      "methodName": "getInputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the input side's input slot.",
      "methodName": "getInputItemInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the input side's output slot.",
      "methodName": "getInputItemOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the input tank.",
      "methodName": "getInputNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the contents of the output tank.",
      "methodName": "getOutput",
      "returns": {
        "type": "Table (FluidStack)",
        "javaType": "net.neoforged.neoforge.fluids.FluidStack"
      }
    },
    {
      "description": "Get the capacity of the output tank.",
      "methodName": "getOutputCapacity",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "description": "Get the filled percentage of the output tank.",
      "methodName": "getOutputFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "description": "Get the contents of the output side's input slot.",
      "methodName": "getOutputItemInput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the contents of the output side's output slot.",
      "methodName": "getOutputItemOutput",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "description": "Get the amount needed to fill the output tank.",
      "methodName": "getOutputNeeded",
      "returns": {
        "type": "Number (int)",
        "javaType": "int"
      }
    },
    {
      "methodName": "getProductionAmount",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getTemperature",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    }
  ],
  "Universal Cable": [
    {
      "methodName": "getBuffer",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getCapacity",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    },
    {
      "methodName": "getFilledPercentage",
      "returns": {
        "type": "Number (double)",
        "javaType": "double"
      }
    },
    {
      "methodName": "getNeeded",
      "returns": {
        "type": "Number (FloatingLong)",
        "javaType": "mekanism.api.math.FloatingLong"
      }
    }
  ],
  "Wind Generator": [
    {
      "description": "Get the contents of the energy item slot.",
      "methodName": "getEnergyItem",
      "returns": {
        "type": "Table (ItemStack)",
        "javaType": "net.minecraft.world.item.ItemStack"
      }
    },
    {
      "methodName": "isBlacklistedDimension",
      "returns": {
        "type": "boolean",
        "javaType": "boolean"
      }
    }
  ]
}